-- Insert sample challenges
INSERT INTO challenges (title, description, difficulty, tags, language, starter_code, test_cases) VALUES
('Return the Sum of Two Numbers', 'Create a function that takes two numbers as arguments and returns their sum.', 'Very easy', ARRAY['geometry', 'maths', 'numbers'], 'javascript', 'function addition(a, b) {\n  // Your code here\n}', '{"tests": [{"input": [1, 2], "expected": 3}, {"input": [3, 2], "expected": 5}]}'),
('Area of a Triangle', 'Write a function that takes the base and height of a triangle and return its area.', 'Very easy', ARRAY['geometry', 'maths', 'numbers'], 'javascript', 'function triArea(base, height) {\n  // Your code here\n}', '{"tests": [{"input": [3, 2], "expected": 3}, {"input": [7, 4], "expected": 14}]}'),
('Convert Minutes into Seconds', 'Write a function that takes an integer minutes and converts it to seconds.', 'Very easy', ARRAY['maths', 'numbers'], 'javascript', 'function convert(minutes) {\n  // Your code here\n}', '{"tests": [{"input": [5], "expected": 300}, {"input": [3], "expected": 180}]}'),
('Find the Maximum Number in an Array', 'Create a function that finds and returns the maximum number in a given array.', 'Easy', ARRAY['arrays', 'maths'], 'javascript', 'function findMax(arr) {\n  // Your code here\n}', '{"tests": [{"input": [[1, 3, 2]], "expected": 3}, {"input": [[13, 27, 18, 26]], "expected": 27}]}'),
('Check if a String is a Palindrome', 'Write a function that checks if a given string is a palindrome.', 'Medium', ARRAY['strings', 'logic'], 'python', 'def is_palindrome(s):\n    # Your code here\n    pass', '{"tests": [{"input": ["racecar"], "expected": true}, {"input": ["hello"], "expected": false}]}'),
('Factorial of a Number', 'Compute the factorial of a given number.', 'Easy', ARRAY['maths', 'recursion'], 'java', 'public static int factorial(int n) {\n    // Your code here\n}', '{"tests": [{"input": [5], "expected": 120}, {"input": [3], "expected": 6}]}'),
('Fibonacci Sequence', 'Generate the Fibonacci sequence up to a given number.', 'Medium', ARRAY['maths', 'sequences'], 'javascript', 'function fibonacci(n) {\n  // Your code here\n}', '{"tests": [{"input": [8], "expected": [0, 1, 1, 2, 3, 5, 8]}, {"input": [4], "expected": [0, 1, 1, 2, 3]}]}'),
('Sort an Array', 'Implement a function to sort an array in ascending order.', 'Medium', ARRAY['arrays', 'sorting'], 'python', 'def sort_array(arr):\n    # Your code here\n    pass', '{"tests": [{"input": [[3, 1, 4, 1, 5]], "expected": [1, 1, 3, 4, 5]}, {"input": [[9, 2, 7]], "expected": [2, 7, 9]}]}'),
('Binary Search', 'Implement binary search on a sorted array.', 'Hard', ARRAY['arrays', 'searching'], 'java', 'public static int binarySearch(int[] arr, int target) {\n    // Your code here\n}', '{"tests": [{"input": [[1, 2, 3, 4, 5], 3], "expected": 2}, {"input": [[1, 3, 5, 7, 9], 7], "expected": 3}]}'),
('Count Vowels in a String', 'Count the number of vowels in a given string.', 'Very easy', ARRAY['strings'], 'javascript', 'function countVowels(str) {\n  // Your code here\n}', '{"tests": [{"input": ["hello"], "expected": 2}, {"input": ["programming"], "expected": 3}]}'),
('Reverse a String', 'Write a function that takes a string and returns it reversed.', 'Easy', ARRAY['strings'], 'javascript', 'function reverseString(str) {\n  // Your code here\n}', '{"tests": [{"input": ["hello"], "expected": "olleh"}, {"input": ["world"], "expected": "dlrow"}]}'),
('Check for Prime Number', 'Write a function that checks if a given number is prime.', 'Medium', ARRAY['maths', 'numbers'], 'javascript', 'function isPrime(num) {\n  // Your code here\n}', '{"tests": [{"input": [7], "expected": true}, {"input": [4], "expected": false}]}'),
('Sum of Array Elements', 'Write a function that returns the sum of all numbers in an array.', 'Easy', ARRAY['arrays', 'maths'], 'javascript', 'function sumArray(arr) {\n  // Your code here\n}', '{"tests": [{"input": [[1, 2, 3, 4]], "expected": 10}, {"input": [[5, 5, 5]], "expected": 15}]}'),
('Check for Anagram', 'Write a function that checks if two strings are anagrams of each other.', 'Medium', ARRAY['strings', 'logic'], 'python', 'def is_anagram(str1, str2):\n    # Your code here\n    pass', '{"tests": [{"input": ["listen", "silent"], "expected": true}, {"input": ["hello", "world"], "expected": false}]}'),
('Find First Non-Repeated Character', 'Write a function that returns the first non-repeated character in a string.', 'Medium', ARRAY['strings', 'logic'], 'python', 'def first_non_repeated(s):\n    # Your code here\n    pass', '{"tests": [{"input": ["abccba"], "expected": null}, {"input": ["abcdef"], "expected": "a"}]}'),
('Power of a Number', 'Write a function that calculates the power of a number (base raised to exponent).', 'Easy', ARRAY['maths', 'numbers'], 'python', 'def power(base, exponent):\n    # Your code here\n    pass', '{"tests": [{"input": [2, 3], "expected": 8}, {"input": [5, 2], "expected": 25}]}');
